// Generated by gencpp from file searching_algorithms/node_index.msg
// DO NOT EDIT!


#ifndef SEARCHING_ALGORITHMS_MESSAGE_NODE_INDEX_H
#define SEARCHING_ALGORITHMS_MESSAGE_NODE_INDEX_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace searching_algorithms
{
template <class ContainerAllocator>
struct node_index_
{
  typedef node_index_<ContainerAllocator> Type;

  node_index_()
    : stop(0)
    , index(0)
    , color(0)  {
    }
  node_index_(const ContainerAllocator& _alloc)
    : stop(0)
    , index(0)
    , color(0)  {
  (void)_alloc;
    }



   typedef int32_t _stop_type;
  _stop_type stop;

   typedef int32_t _index_type;
  _index_type index;

   typedef int32_t _color_type;
  _color_type color;





  typedef boost::shared_ptr< ::searching_algorithms::node_index_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::searching_algorithms::node_index_<ContainerAllocator> const> ConstPtr;

}; // struct node_index_

typedef ::searching_algorithms::node_index_<std::allocator<void> > node_index;

typedef boost::shared_ptr< ::searching_algorithms::node_index > node_indexPtr;
typedef boost::shared_ptr< ::searching_algorithms::node_index const> node_indexConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::searching_algorithms::node_index_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::searching_algorithms::node_index_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::searching_algorithms::node_index_<ContainerAllocator1> & lhs, const ::searching_algorithms::node_index_<ContainerAllocator2> & rhs)
{
  return lhs.stop == rhs.stop &&
    lhs.index == rhs.index &&
    lhs.color == rhs.color;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::searching_algorithms::node_index_<ContainerAllocator1> & lhs, const ::searching_algorithms::node_index_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace searching_algorithms

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::searching_algorithms::node_index_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::searching_algorithms::node_index_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::searching_algorithms::node_index_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::searching_algorithms::node_index_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::searching_algorithms::node_index_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::searching_algorithms::node_index_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::searching_algorithms::node_index_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a66179b4ab883cc0c91011178517137f";
  }

  static const char* value(const ::searching_algorithms::node_index_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa66179b4ab883cc0ULL;
  static const uint64_t static_value2 = 0xc91011178517137fULL;
};

template<class ContainerAllocator>
struct DataType< ::searching_algorithms::node_index_<ContainerAllocator> >
{
  static const char* value()
  {
    return "searching_algorithms/node_index";
  }

  static const char* value(const ::searching_algorithms::node_index_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::searching_algorithms::node_index_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 stop\n"
"int32 index\n"
"int32 color\n"
;
  }

  static const char* value(const ::searching_algorithms::node_index_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::searching_algorithms::node_index_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stop);
      stream.next(m.index);
      stream.next(m.color);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct node_index_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::searching_algorithms::node_index_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::searching_algorithms::node_index_<ContainerAllocator>& v)
  {
    s << indent << "stop: ";
    Printer<int32_t>::stream(s, indent + "  ", v.stop);
    s << indent << "index: ";
    Printer<int32_t>::stream(s, indent + "  ", v.index);
    s << indent << "color: ";
    Printer<int32_t>::stream(s, indent + "  ", v.color);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SEARCHING_ALGORITHMS_MESSAGE_NODE_INDEX_H
